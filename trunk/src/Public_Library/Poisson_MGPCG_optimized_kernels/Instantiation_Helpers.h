//#####################################################################
// Copyright 2009-2010, Eftychios Sifakis, Aleka McAdams.
// This file is governed by the license contained in the accompanying file COPYRIGHT.txt.
//#####################################################################

#include <cstdlib>
#define CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,Y_SIZE,Z_SIZE) \
    else if(y_size==Y_SIZE && z_size==Z_SIZE) derived=new KERNEL_NAME##_Size_Specific_Helper<T,Y_SIZE,Z_SIZE>ARG_LIST;

#define CONSTRUCTOR_INSTANTIATION_HELPERX(KERNEL_NAME,ARG_DECL,ARG_LIST) \
template<class T> \
KERNEL_NAME##_Helper<T>::KERNEL_NAME##_Helper ARG_DECL :x_size(x_size_input),y_size(y_size_input),z_size(z_size_input) \
{									\
        if(x_size%4 != 0) \
        {std::cerr<<"FATAL ERROR [" << #KERNEL_NAME << "] : Unsupported size"<<std::endl;exit(1);} \
        if(0);									\
        CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,8,8) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,12,8) \
        CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,12,12) \
        CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,18,12) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,16,16) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,24,16) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,24,24) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,36,24) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,32,32) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,48,32) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,48,48) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,72,48) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,64,64) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,96,64) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,96,96) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,144,96) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,120,96) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,128,128) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,192,128) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,192,192) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,288,192) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,256,256) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,384,256) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,384,384) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,576,384) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,512,512) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,768,512) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,768,768) \
	CONSTRUCTOR_INSTANTIATION_CONDITIONAL_HELPERX(T,KERNEL_NAME,ARG_LIST,1152,768) \
	else{std::cerr<<"FATAL ERROR [" << #KERNEL_NAME << "] : Unsupported size"<<std::endl;exit(1);} \
}


